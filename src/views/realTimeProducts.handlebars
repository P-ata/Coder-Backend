<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Real-Time Products</title>
    <link rel="stylesheet" href="/css/styles.css">
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();

        function applyFilters() {
            const query = document.getElementById('filter-query').value;
            const stockRange = document.getElementById('stock-range').value;
            const sort = document.getElementById('sort-order').value;
            const limit = 5;
            const page = 1; 

            let url = `/api/realtimeproducts?page=${page}&limit=${limit}`;
            if (query) url += `&query=${query}`;
            if (stockRange) url += `&stockRange=${stockRange}`;
            if (sort) url += `&sort=${sort}`;

            window.location.href = url;
        }

        document.addEventListener('DOMContentLoaded', (event) => {
            const params = new URLSearchParams(window.location.search);
            const query = params.get('query');
            const stockRange = params.get('stockRange');
            const sort = params.get('sort');

            if (query) {
                document.getElementById('filter-query').value = query;
            }
            if (stockRange) {
                document.getElementById('stock-range').value = stockRange;
            }
            if (sort) {
                document.getElementById('sort-order').value = sort;
            }
        });

        function openEditForm(productId) {
            const productElement = document.querySelector(`li[data-id="${productId}"]`);
            const editForm = document.getElementById('edit-form-template').content.cloneNode(true);

            editForm.querySelector('.edit-form').dataset.id = productId;
            editForm.querySelector('.edit-id').value = productId;
            editForm.querySelector('.edit-title').value = productElement.querySelector('.product-title').textContent;
            editForm.querySelector('.edit-description').value = productElement.querySelector('.product-description').textContent;
            editForm.querySelector('.edit-price').value = parseFloat(productElement.querySelector('.product-price').textContent.replace('Price: $', ''));
            editForm.querySelector('.edit-category').value = productElement.querySelector('.product-category').textContent.replace('Category: ', '');
            editForm.querySelector('.edit-stock').value = productElement.querySelector('.product-stock').textContent.replace('Stock: ', '');
            editForm.querySelector('.edit-image').value = productElement.querySelector('img').src;

            const existingForm = productElement.querySelector('.edit-form');
            if (existingForm) {
                existingForm.remove();
            }
            productElement.appendChild(editForm);
        }

        function closeEditForm(event) {
            const form = event.target.closest('.edit-form');
            if (form) {
                form.remove();
            }
        }

        function editProduct(event) {
            event.preventDefault();
            const form = event.target;
            const productId = form.querySelector('.edit-id').value;
            const title = form.querySelector('.edit-title').value;
            const description = form.querySelector('.edit-description').value;
            const price = parseFloat(form.querySelector('.edit-price').value);
            const category = form.querySelector('.edit-category').value;
            const stock = form.querySelector('.edit-stock').value;
            const image = form.querySelector('.edit-image').value;

            socket.emit('editProduct', { productId, title, description, price, category, stock, image });
        }

        socket.on('productAdded', (product) => {
            addCategoryOption(product.category);
            window.location.reload();
        });

        socket.on('productDeleted', (productId, category) => {
            removeCategoryOption(category);
            window.location.reload();
        });

        socket.on('categoryEmpty', (category) => {
            const filterQuery = document.getElementById('filter-query');
            if (filterQuery.value === category) {
                filterQuery.value = '';
                setTimeout(() => {
                    applyFilters();
                }, 100);
            }
        });

        socket.on('categoriesUpdated', (categories) => {
            updateCategories(categories);
        });

        socket.on('productUpdated', (updatedProduct) => {
            const productElement = document.querySelector(`li[data-id="${updatedProduct._id}"]`);
            productElement.querySelector('.product-title').textContent = updatedProduct.title;
            productElement.querySelector('.product-description').textContent = updatedProduct.description;
            productElement.querySelector('.product-price').textContent = `Price: $${updatedProduct.price.toFixed(2)}`;
            productElement.querySelector('.product-category').textContent = `Category: ${updatedProduct.category}`;
            productElement.querySelector('.product-stock').textContent = `Stock: ${updatedProduct.stock}`;
            productElement.querySelector('img').src = updatedProduct.image;

            // Remove edit form after saving changes
            const editForm = productElement.querySelector('.edit-form');
            if (editForm) {
                editForm.remove();
            }
        });

        function addProduct(event) {
            event.preventDefault();
            const title = document.getElementById('title').value;
            const description = document.getElementById('description').value;
            const price = parseFloat(document.getElementById('price').value);
            const category = document.getElementById('category').value;
            const image = document.getElementById('image').value;
            const stock = document.getElementById('stock').value;

            const id = generateUniqueId();

            socket.emit('addProduct', { id, title, description, price, category, image, stock });

            // Clear form fields after submission
            document.getElementById('title').value = '';
            document.getElementById('description').value = '';
            document.getElementById('price').value = '';
            document.getElementById('category').value = '';
            document.getElementById('image').value = '';
            document.getElementById('stock').value = '';
        }

        function deleteProduct(productId) {
            socket.emit('deleteProduct', productId);
        }

        function addCategoryOption(category) {
            const filterQuery = document.getElementById('filter-query');
            if (!Array.from(filterQuery.options).some(option => option.value === category)) {
                const newOption = document.createElement('option');
                newOption.value = category;
                newOption.textContent = category;
                filterQuery.appendChild(newOption);
            }
        }

        function removeCategoryOption(category) {
            const filterQuery = document.getElementById('filter-query');
            const options = Array.from(filterQuery.options);
            const optionToRemove = options.find(option => option.value === category);
            if (optionToRemove) {
                filterQuery.removeChild(optionToRemove);
            }
        }

        function updateCategories(categories) {
            const filterQuery = document.getElementById('filter-query');
            filterQuery.innerHTML = '<option value="">All Categories</option>';
            categories.forEach(category => {
                const newOption = document.createElement('option');
                newOption.value = category;
                newOption.textContent = category;
                filterQuery.appendChild(newOption);
            });
        }

        function generateUniqueId() {
            return '_' + Math.random().toString(36).substr(2, 9);
        }
    </script>
</head>
<body>
    <h1>Real-Time Product List</h1>

    <form onsubmit="addProduct(event)">
        <input type="text" id="title" placeholder="Title" required>
        <input type="text" id="description" placeholder="Description" required>
        <input type="number" step="0.01" id="price" placeholder="Price" required>
        <input type="text" id="category" placeholder="Category" required>
        <input type="text" id="image" placeholder="Image URL" required>
        <input type="number" id="stock" placeholder="Stock" required>
        <button type="submit">Add Product</button>
    </form>

    <div class="filters">
        <select id="filter-query">
            <option value="">All Categories</option>
            {{#each categories}}
                <option value="{{this}}">{{this}}</option>
            {{/each}}
        </select>
        <select id="stock-range">
            <option value="">All Stock Ranges</option>
            <option value="0-10">0-10</option>
            <option value="11-20">11-20</option>
            <option value="21-30">21-30</option>
            <option value="31-40">31-40</option>
            <option value="41-50">41-50</option>
            <option value="51-60">51-60</option>
            <option value="61-70">61-70</option>
            <option value="71-80">71-80</option>
            <option value="81-90">81-90</option>
            <option value="91-100">91-100</option>
        </select>
        <select id="sort-order">
            <option value="">Sort by price</option>
            <option value="asc">Ascending</option>
            <option value="desc">Descending</option>
        </select>
        <button onclick="applyFilters()">Apply Filters</button>
    </div>

    <div id="pagination-top" class="pagination">
        <button onclick="window.location.href='{{prevLink}}'" {{#unless hasPrevPage}}disabled{{/unless}}>Prev</button>
        <span>Page {{page}} of {{totalPages}}</span>
        <button onclick="window.location.href='{{nextLink}}'" {{#unless hasNextPage}}disabled{{/unless}}>Next</button>
    </div>

    <ul id="product-list">
        {{#each products}}
            <li data-id="{{this._id}}">
                <h2 class="product-title">{{this.title}}</h2>
                <img src="{{this.image}}" alt="{{this.title}}" width="100" height="100">
                <p class="product-description">{{this.description}}</p>
                <p class="product-price">Price: ${{this.price}}</p>
                <p class="product-category">Category: {{this.category}}</p>
                <p class="product-stock">Stock: {{this.stock}}</p>
                <button onclick="deleteProduct('{{this._id}}')">Delete</button>
                <button onclick="openEditForm('{{this._id}}')">Edit</button>
            </li>
        {{/each}}
    </ul>

    <template id="edit-form-template">
        <div class="edit-form">
            <form onsubmit="editProduct(event)">
                <input type="hidden" class="edit-id">
                <input type="text" class="edit-title" placeholder="Title" required>
                <input type="text" class="edit-description" placeholder="Description" required>
                <input type="number" step="0.01" class="edit-price" placeholder="Price" required>
                <input type="text" class="edit-category" placeholder="Category" required>
                <input type="text" class="edit-image" placeholder="Image URL" required>
                <input type="number" class="edit-stock" placeholder="Stock" required>
                <button type="submit">Save Changes</button>
                <button type="button" onclick="closeEditForm(event)">Cancel</button>
            </form>
        </div>
    </template>
    
    <div id="pagination-bottom" class="pagination">
        <button onclick="window.location.href='{{prevLink}}'" {{#unless hasPrevPage}}disabled{{/unless}}>Prev</button>
        <span>Page {{page}} of {{totalPages}}</span>
        <button onclick="window.location.href='{{nextLink}}'" {{#unless hasNextPage}}disabled{{/unless}}>Next</button>
    </div>
</body>
</html>
 